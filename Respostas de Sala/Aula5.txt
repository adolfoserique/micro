Para as questões 2 a 5, considere que as variáveis 'f', 'g', 'h', 'i' e 'j' são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor 'A[]' é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores:

	f: R4

	g: R5

	h: R6

	i: R7

	j: R8

	A: R9

1. Escreva os trechos de código assembly do MSP430 para:

	(a) Somente setar o bit menos significativo de R5.

		bis.w #0001h,R5; // R5 = 0x0001 OR R5; 

	(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo.

		bis.w #0003h,R6

	(c) Somente zerar o terceiro bit menos significativo de R7.

		bic.w #0004h,R7

	(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.

		bic.w #0006h,R8

	(e) Somente inverter o bit mais significativo de R9.

		xor.w #1000h,R9

	(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10.

		xor.w #F000h,R10

		bis.w #000Fh,R10

		 

2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:



	if(i>j) f = g+h+10;

	else f = g-h-10;

//-----------------------------------

	cmp.w R7,R8  

	jl.w LABEL; Se R8(j) for menor que R7(i) jump LABEL

	mov.w R5,R12

	sub.w #10,R12

	sub.w R6,R12

	mov.w R12,R4; R4 = R5 - R6 - 10

	jmp.w EXIT

LABEL:  mov.w R5,R12

	add.w #10,R12

	add.w R6, R12

	mov.w R12,R4 ;R4 = R5 + R6 + 10

EXIT:   ...	

//--------------------------------

	





3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:



	while(save[i]!=k) i++;

//-------------------------

loop	mov.w R12,R7

	rla.w R12

	add.w R10,R12

	cmp.w 0(R12),R9

	jeq.w fim

	inc.w R7

	jmp loop

fim:    ...

//------------------------

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:



	for(i=0; i<100; i++) A[i] = i*2;

//----------------------------------------------

	mov.w #100,R14

loop:	mov.w R7,R12; 		adc "i" ao R12

	rla.w R12; 		R12 = i*2

	mov.w R12,R13; 		R13 = i*2

	add.w R9,R12;		R12 = &A + i*2

	mov.w R13,0(R12);	A[I]{0(R12)} = i*2

	cmp R7,R14;		compara "i" com 100		

	jge exit		if(i >= 100) finaliza

	icc.w R7		else i ++

	jmp loop		retorna ao loop

exit    ...

//----------------------------------------------	

	



5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:



	for(i=99; i>=0; i--) A[i] = i*2;

//----------------------------------------------	

	mov.w #1,R14

	mov.w #99,R7

loop:	mov.w R7,R12; 		adc "i" ao R12

	rla.w R12; 		R12 = i*2

	mov.w R12,R13; 		R13 = i*2

	add.w R9,R12;		R12 = &A + i*2

	mov.w R13,0(R12);	A[I]{0(R12)} = i*2

	cmp R14,R7;		compara "i" com 0		

	jeq exit		if(i == 0) finaliza

	idc.w R7		else i --

	jmp loop		retorna ao loop

exit    ...

//----------------------------------------------